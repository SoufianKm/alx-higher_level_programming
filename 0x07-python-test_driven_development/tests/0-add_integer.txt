=============================
The ``0-add_integer`` module
=============================

This module defines an integer addition function ``add_integer(a, b=98)``.


Using ``add_integer``
---------------------

``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.



Import the function:
--------------------

    >>> add_integer = __import__('0-add_integer').add_integer


Now use it:
-----------

Tests for Positive Numbers.

    >>> add_integer(8, 4)
    12


Tests for Negative Numbers.

    >>> add_integer(-8, -4)
    -12


Tests for positive Floats.

    >>> add_integer(1.7, 3.6)
    4


Tests for Negative Floats.

    >>> add_integer(-1.7, -3.6)
    -4

Note that floats are casted to ints before addition is performed.

Test just one Argument.

    >>> add_integer(10)
    108

The second argument is optional - by default, it is 98.


test Error Cases:
-----------------

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:


    >>> add_integer(True, False)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(3, float("inf"))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> add_integer(2, float("NaN"))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(3, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer("Hello", "World")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer
